// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Discovery.pb.h"
// @@protoc_insertion_point(imports)

@implementation ASDtoDiscoveryRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ASDtoDiscoveryRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ObjectivecDescriptorRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface ASDtoServiceRequest ()
@property (strong) NSString* type;
@property SInt32 port;
@property ASDtoServiceRequestMode mode;
@end

@implementation ASDtoServiceRequest

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasPort {
  return !!hasPort_;
}
- (void) setHasPort:(BOOL) _value_ {
  hasPort_ = !!_value_;
}
@synthesize port;
- (BOOL) hasMode {
  return !!hasMode_;
}
- (void) setHasMode:(BOOL) _value_ {
  hasMode_ = !!_value_;
}
@synthesize mode;
- (instancetype) init {
  if ((self = [super init])) {
    self.type = @"";
    self.port = 0;
    self.mode = ASDtoServiceRequestModeTCP;
  }
  return self;
}
static ASDtoServiceRequest* defaultASDtoServiceRequestInstance = nil;
+ (void) initialize {
  if (self == [ASDtoServiceRequest class]) {
    defaultASDtoServiceRequestInstance = [[ASDtoServiceRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultASDtoServiceRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultASDtoServiceRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  if (!self.hasPort) {
    return NO;
  }
  if (!self.hasMode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeString:1 value:self.type];
  }
  if (self.hasPort) {
    [output writeInt32:2 value:self.port];
  }
  if (self.hasMode) {
    [output writeEnum:3 value:self.mode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeStringSize(1, self.type);
  }
  if (self.hasPort) {
    size_ += computeInt32Size(2, self.port);
  }
  if (self.hasMode) {
    size_ += computeEnumSize(3, self.mode);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ASDtoServiceRequest*) parseFromData:(NSData*) data {
  return (ASDtoServiceRequest*)[[[ASDtoServiceRequest builder] mergeFromData:data] build];
}
+ (ASDtoServiceRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ASDtoServiceRequest*)[[[ASDtoServiceRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ASDtoServiceRequest*) parseFromInputStream:(NSInputStream*) input {
  return (ASDtoServiceRequest*)[[[ASDtoServiceRequest builder] mergeFromInputStream:input] build];
}
+ (ASDtoServiceRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ASDtoServiceRequest*)[[[ASDtoServiceRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ASDtoServiceRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ASDtoServiceRequest*)[[[ASDtoServiceRequest builder] mergeFromCodedInputStream:input] build];
}
+ (ASDtoServiceRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ASDtoServiceRequest*)[[[ASDtoServiceRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ASDtoServiceRequestBuilder*) builder {
  return [[ASDtoServiceRequestBuilder alloc] init];
}
+ (ASDtoServiceRequestBuilder*) builderWithPrototype:(ASDtoServiceRequest*) prototype {
  return [[ASDtoServiceRequest builder] mergeFrom:prototype];
}
- (ASDtoServiceRequestBuilder*) builder {
  return [ASDtoServiceRequest builder];
}
- (ASDtoServiceRequestBuilder*) toBuilder {
  return [ASDtoServiceRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", self.type];
  }
  if (self.hasPort) {
    [output appendFormat:@"%@%@: %@\n", indent, @"port", [NSNumber numberWithInteger:self.port]];
  }
  if (self.hasMode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mode", NSStringFromASDtoServiceRequestMode(self.mode)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasType) {
    [dictionary setObject: self.type forKey: @"type"];
  }
  if (self.hasPort) {
    [dictionary setObject: [NSNumber numberWithInteger:self.port] forKey: @"port"];
  }
  if (self.hasMode) {
    [dictionary setObject: @(self.mode) forKey: @"mode"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ASDtoServiceRequest class]]) {
    return NO;
  }
  ASDtoServiceRequest *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || [self.type isEqual:otherMessage.type]) &&
      self.hasPort == otherMessage.hasPort &&
      (!self.hasPort || self.port == otherMessage.port) &&
      self.hasMode == otherMessage.hasMode &&
      (!self.hasMode || self.mode == otherMessage.mode) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + [self.type hash];
  }
  if (self.hasPort) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.port] hash];
  }
  if (self.hasMode) {
    hashCode = hashCode * 31 + self.mode;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL ASDtoServiceRequestModeIsValidValue(ASDtoServiceRequestMode value) {
  switch (value) {
    case ASDtoServiceRequestModeTCP:
    case ASDtoServiceRequestModeUDP:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromASDtoServiceRequestMode(ASDtoServiceRequestMode value) {
  switch (value) {
    case ASDtoServiceRequestModeTCP:
      return @"ASDtoServiceRequestModeTCP";
    case ASDtoServiceRequestModeUDP:
      return @"ASDtoServiceRequestModeUDP";
    default:
      return nil;
  }
}

@interface ASDtoServiceRequestBuilder()
@property (strong) ASDtoServiceRequest* resultServiceRequest;
@end

@implementation ASDtoServiceRequestBuilder
@synthesize resultServiceRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultServiceRequest = [[ASDtoServiceRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultServiceRequest;
}
- (ASDtoServiceRequestBuilder*) clear {
  self.resultServiceRequest = [[ASDtoServiceRequest alloc] init];
  return self;
}
- (ASDtoServiceRequestBuilder*) clone {
  return [ASDtoServiceRequest builderWithPrototype:resultServiceRequest];
}
- (ASDtoServiceRequest*) defaultInstance {
  return [ASDtoServiceRequest defaultInstance];
}
- (ASDtoServiceRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ASDtoServiceRequest*) buildPartial {
  ASDtoServiceRequest* returnMe = resultServiceRequest;
  self.resultServiceRequest = nil;
  return returnMe;
}
- (ASDtoServiceRequestBuilder*) mergeFrom:(ASDtoServiceRequest*) other {
  if (other == [ASDtoServiceRequest defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasPort) {
    [self setPort:other.port];
  }
  if (other.hasMode) {
    [self setMode:other.mode];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ASDtoServiceRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ASDtoServiceRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setType:[input readString]];
        break;
      }
      case 16: {
        [self setPort:[input readInt32]];
        break;
      }
      case 24: {
        ASDtoServiceRequestMode value = (ASDtoServiceRequestMode)[input readEnum];
        if (ASDtoServiceRequestModeIsValidValue(value)) {
          [self setMode:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return resultServiceRequest.hasType;
}
- (NSString*) type {
  return resultServiceRequest.type;
}
- (ASDtoServiceRequestBuilder*) setType:(NSString*) value {
  resultServiceRequest.hasType = YES;
  resultServiceRequest.type = value;
  return self;
}
- (ASDtoServiceRequestBuilder*) clearType {
  resultServiceRequest.hasType = NO;
  resultServiceRequest.type = @"";
  return self;
}
- (BOOL) hasPort {
  return resultServiceRequest.hasPort;
}
- (SInt32) port {
  return resultServiceRequest.port;
}
- (ASDtoServiceRequestBuilder*) setPort:(SInt32) value {
  resultServiceRequest.hasPort = YES;
  resultServiceRequest.port = value;
  return self;
}
- (ASDtoServiceRequestBuilder*) clearPort {
  resultServiceRequest.hasPort = NO;
  resultServiceRequest.port = 0;
  return self;
}
- (BOOL) hasMode {
  return resultServiceRequest.hasMode;
}
- (ASDtoServiceRequestMode) mode {
  return resultServiceRequest.mode;
}
- (ASDtoServiceRequestBuilder*) setMode:(ASDtoServiceRequestMode) value {
  resultServiceRequest.hasMode = YES;
  resultServiceRequest.mode = value;
  return self;
}
- (ASDtoServiceRequestBuilder*) clearMode {
  resultServiceRequest.hasMode = NO;
  resultServiceRequest.mode = ASDtoServiceRequestModeTCP;
  return self;
}
@end

@interface ASDtoServiceResponse ()
@property SInt32 port;
@property (strong) NSString* type;
@property (strong) NSString* title;
@property (strong) NSData* payload;
@end

@implementation ASDtoServiceResponse

- (BOOL) hasPort {
  return !!hasPort_;
}
- (void) setHasPort:(BOOL) _value_ {
  hasPort_ = !!_value_;
}
@synthesize port;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) _value_ {
  hasTitle_ = !!_value_;
}
@synthesize title;
- (BOOL) hasPayload {
  return !!hasPayload_;
}
- (void) setHasPayload:(BOOL) _value_ {
  hasPayload_ = !!_value_;
}
@synthesize payload;
- (instancetype) init {
  if ((self = [super init])) {
    self.port = 0;
    self.type = @"";
    self.title = @"";
    self.payload = [NSData data];
  }
  return self;
}
static ASDtoServiceResponse* defaultASDtoServiceResponseInstance = nil;
+ (void) initialize {
  if (self == [ASDtoServiceResponse class]) {
    defaultASDtoServiceResponseInstance = [[ASDtoServiceResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultASDtoServiceResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultASDtoServiceResponseInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPort) {
    return NO;
  }
  if (!self.hasType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPort) {
    [output writeInt32:1 value:self.port];
  }
  if (self.hasType) {
    [output writeString:2 value:self.type];
  }
  if (self.hasTitle) {
    [output writeString:3 value:self.title];
  }
  if (self.hasPayload) {
    [output writeData:4 value:self.payload];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPort) {
    size_ += computeInt32Size(1, self.port);
  }
  if (self.hasType) {
    size_ += computeStringSize(2, self.type);
  }
  if (self.hasTitle) {
    size_ += computeStringSize(3, self.title);
  }
  if (self.hasPayload) {
    size_ += computeDataSize(4, self.payload);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ASDtoServiceResponse*) parseFromData:(NSData*) data {
  return (ASDtoServiceResponse*)[[[ASDtoServiceResponse builder] mergeFromData:data] build];
}
+ (ASDtoServiceResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ASDtoServiceResponse*)[[[ASDtoServiceResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ASDtoServiceResponse*) parseFromInputStream:(NSInputStream*) input {
  return (ASDtoServiceResponse*)[[[ASDtoServiceResponse builder] mergeFromInputStream:input] build];
}
+ (ASDtoServiceResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ASDtoServiceResponse*)[[[ASDtoServiceResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ASDtoServiceResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ASDtoServiceResponse*)[[[ASDtoServiceResponse builder] mergeFromCodedInputStream:input] build];
}
+ (ASDtoServiceResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ASDtoServiceResponse*)[[[ASDtoServiceResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ASDtoServiceResponseBuilder*) builder {
  return [[ASDtoServiceResponseBuilder alloc] init];
}
+ (ASDtoServiceResponseBuilder*) builderWithPrototype:(ASDtoServiceResponse*) prototype {
  return [[ASDtoServiceResponse builder] mergeFrom:prototype];
}
- (ASDtoServiceResponseBuilder*) builder {
  return [ASDtoServiceResponse builder];
}
- (ASDtoServiceResponseBuilder*) toBuilder {
  return [ASDtoServiceResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPort) {
    [output appendFormat:@"%@%@: %@\n", indent, @"port", [NSNumber numberWithInteger:self.port]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", self.type];
  }
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  if (self.hasPayload) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payload", self.payload];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPort) {
    [dictionary setObject: [NSNumber numberWithInteger:self.port] forKey: @"port"];
  }
  if (self.hasType) {
    [dictionary setObject: self.type forKey: @"type"];
  }
  if (self.hasTitle) {
    [dictionary setObject: self.title forKey: @"title"];
  }
  if (self.hasPayload) {
    [dictionary setObject: self.payload forKey: @"payload"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ASDtoServiceResponse class]]) {
    return NO;
  }
  ASDtoServiceResponse *otherMessage = other;
  return
      self.hasPort == otherMessage.hasPort &&
      (!self.hasPort || self.port == otherMessage.port) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || [self.type isEqual:otherMessage.type]) &&
      self.hasTitle == otherMessage.hasTitle &&
      (!self.hasTitle || [self.title isEqual:otherMessage.title]) &&
      self.hasPayload == otherMessage.hasPayload &&
      (!self.hasPayload || [self.payload isEqual:otherMessage.payload]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPort) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.port] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [self.type hash];
  }
  if (self.hasTitle) {
    hashCode = hashCode * 31 + [self.title hash];
  }
  if (self.hasPayload) {
    hashCode = hashCode * 31 + [self.payload hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ASDtoServiceResponseBuilder()
@property (strong) ASDtoServiceResponse* resultServiceResponse;
@end

@implementation ASDtoServiceResponseBuilder
@synthesize resultServiceResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultServiceResponse = [[ASDtoServiceResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultServiceResponse;
}
- (ASDtoServiceResponseBuilder*) clear {
  self.resultServiceResponse = [[ASDtoServiceResponse alloc] init];
  return self;
}
- (ASDtoServiceResponseBuilder*) clone {
  return [ASDtoServiceResponse builderWithPrototype:resultServiceResponse];
}
- (ASDtoServiceResponse*) defaultInstance {
  return [ASDtoServiceResponse defaultInstance];
}
- (ASDtoServiceResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ASDtoServiceResponse*) buildPartial {
  ASDtoServiceResponse* returnMe = resultServiceResponse;
  self.resultServiceResponse = nil;
  return returnMe;
}
- (ASDtoServiceResponseBuilder*) mergeFrom:(ASDtoServiceResponse*) other {
  if (other == [ASDtoServiceResponse defaultInstance]) {
    return self;
  }
  if (other.hasPort) {
    [self setPort:other.port];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasPayload) {
    [self setPayload:other.payload];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ASDtoServiceResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ASDtoServiceResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPort:[input readInt32]];
        break;
      }
      case 18: {
        [self setType:[input readString]];
        break;
      }
      case 26: {
        [self setTitle:[input readString]];
        break;
      }
      case 34: {
        [self setPayload:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasPort {
  return resultServiceResponse.hasPort;
}
- (SInt32) port {
  return resultServiceResponse.port;
}
- (ASDtoServiceResponseBuilder*) setPort:(SInt32) value {
  resultServiceResponse.hasPort = YES;
  resultServiceResponse.port = value;
  return self;
}
- (ASDtoServiceResponseBuilder*) clearPort {
  resultServiceResponse.hasPort = NO;
  resultServiceResponse.port = 0;
  return self;
}
- (BOOL) hasType {
  return resultServiceResponse.hasType;
}
- (NSString*) type {
  return resultServiceResponse.type;
}
- (ASDtoServiceResponseBuilder*) setType:(NSString*) value {
  resultServiceResponse.hasType = YES;
  resultServiceResponse.type = value;
  return self;
}
- (ASDtoServiceResponseBuilder*) clearType {
  resultServiceResponse.hasType = NO;
  resultServiceResponse.type = @"";
  return self;
}
- (BOOL) hasTitle {
  return resultServiceResponse.hasTitle;
}
- (NSString*) title {
  return resultServiceResponse.title;
}
- (ASDtoServiceResponseBuilder*) setTitle:(NSString*) value {
  resultServiceResponse.hasTitle = YES;
  resultServiceResponse.title = value;
  return self;
}
- (ASDtoServiceResponseBuilder*) clearTitle {
  resultServiceResponse.hasTitle = NO;
  resultServiceResponse.title = @"";
  return self;
}
- (BOOL) hasPayload {
  return resultServiceResponse.hasPayload;
}
- (NSData*) payload {
  return resultServiceResponse.payload;
}
- (ASDtoServiceResponseBuilder*) setPayload:(NSData*) value {
  resultServiceResponse.hasPayload = YES;
  resultServiceResponse.payload = value;
  return self;
}
- (ASDtoServiceResponseBuilder*) clearPayload {
  resultServiceResponse.hasPayload = NO;
  resultServiceResponse.payload = [NSData data];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
